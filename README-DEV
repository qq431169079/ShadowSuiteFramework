README for Developers

1.How the code is structured?

      -At the beginning, The license is commented.
       below the license, include and define
       directives are placed. Function declarations
       comes next. Then what i called 'subfunctions'
       comes next, before the function. Then after
       the function, the main function comes last.
       It's like an inverted tree. because instead of:

       				Main
				 ^
				/ \
			       /   \
		       Function1   Function2
			 ^             ^
		 Subfunctions         Subfunctions



       This is the program's source code structure:



       		 Subfunctions         Subfunctions
		         v              v
		       Function1   Function2
		               \   /
			        \ /
			         v
				Main



2.Comment Tags

      -Comment tags are used to easily understand
       the logic of a program. The comment tags
       labels the code if it has errors, needs to
       be frequently updated, where you left off,
       and more.
           
	   -Comment tags definitions and examples

	        DEV0001 : Requires Attention Tag
		DEV0002 : Frequently Update Tag
		DEV0003 : Where You Left Your Code (WYLYC) Tag
		DEV0004 : Under Construction Tag
		DEV0005 : Mentioned line is for debugging purposes.
		          Comment the mentioned line if not debugging.
		DEV0006 : Feature request Tag

3.Program Development Cycle

      -Shadow Suite uses RAD Program Development Cycle.
       What we have in mind, we test it, then integrate it.

4.Manual Module Installation

      -As of now, Shadow Suite cannot automatically install modules.
       But if you really want to install a module, follow these steps:

       1.Launch Shadow Suite, type 'module', then 'manage', and lastly,
         type 'generate new'.

       2.A new file will be made on the output directory named 'temp.py'.
         Rename it with your desired filename.

       3.Edit the file and write your module. You may need to learn Python 3
         to create your own module.

       4.After finishing programming the file, edit the use_module.py file
         inside the 'core' directory. Add the code below:

		elif module_name == "1":
		    print("Module found!")
		    import modules.1
		    modules.1.main()
	
	 NOTE: Replace '1' with your module's filename.

       5.After that, edit 'list_module.py' and copy the code below, which is
         optional:

       		print(core.misc.cp + "\t\t1" + cw)

	 NOTE: Replace '1' with your module's filename.

       6.After finishing the steps above, it's time to move your custom module
         into the modules folder. Move your custom module to the 'modules' directory.

       7.Lastly, test your module:

       		$ python ShadowSuite.py
		[ShadowSuite.py] $: module
		[Module_Manager.py] $: use
		Enter the module name to use > Your-module-name
