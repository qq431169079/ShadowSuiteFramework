README for Developers

1.How the code is structured?

      -The program is now ported to Python 3. The program has been
       broken down into little pieces called 'modules'. The Shadow
       Suite API provides methods to integrate with Shadow Suite.




2.Comment Tags

      -Comment tags are used to easily understand
       the logic of a program. The comment tags
       labels the code if it has errors, needs to
       be frequently updated, where you left off,
       and more.
           
	   -Comment tags definitions and examples

	        DEV0001 : Requires Attention Tag
		DEV0002 : Frequently Update Tag
		DEV0003 : Where You Left Your Code (WYLYC) Tag
		DEV0004 : Under Construction Tag
		DEV0005 : Mentioned line is for debugging purposes.
		          Comment the mentioned line if not debugging.
		DEV0006 : Feature request Tag

3.Program Development Cycle

      -Shadow Suite uses RAD Program Development Cycle.
       What we have in mind, we test it, integrate it, then publish it.

4.Manual Module Installation

      -As of now, Shadow Suite cannot install modules with just one click.
       But if you really want to install a module, follow these steps:

       1.Launch Shadow Suite, type 'module', then 'manage', and lastly,
         type 'generate new'.

       2.The program will as you for the filename and it will be created.
         It can be seen in the 'output' directory.

       3.Edit the file and write your module. You may need to learn Python 3
         to create your own module.

       4.After finishing programming the file, edit the use_module.py file
         inside the 'core' directory. Add the code below:

		elif module_name == "1":
		    print("Module found!")
		    import modules.1
		    modules.1.main()
	
	 NOTE: Replace '1' with your module's filename.

       5.After that, edit 'list_module.py' and copy the code below, which is
         optional:

       		print(core.misc.cp + "\t\t1" + cw)

	 NOTE: Replace '1' with your module's filename.

       6.The next step is edit 'find_module.py', which is also inside core directory.
         Copy the code below, which is also optional:
	 
	 elif module_name == "1":
	     print("Module found!")
	     import modules.1
	     modules.1.module_info()

	NOTE: Replace '1' with your module's filename.

       7.After finishing the steps above, it's time to move your custom module
         into the modules folder. Move your custom module to the 'modules' directory.

       8.Lastly, test your module:

       		$ python ShadowSuite.py
		[ShadowSuite.py] $: module
		[Module_Manager.py] $: use
		Enter the module name to use > Your-module-name
